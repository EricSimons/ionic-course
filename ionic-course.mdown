# Introduction
Web development technologies have evolved at an incredible clip over the past few years. We've gone from rudimentary DOM manipulation with libraries like jQuery to supercharged web applications organized & powered by elegant MV* based frameworks like AngularJS. Pair this with significant increases in browser rendering speeds, and it is now easier than ever before to build production quality applications on top of Javascript, HTML5 and CSS3.

While these advances have been incredible, they are only just starting to affect the clear platform of the future: mobile. For years, mobile rendering speeds were atrocious and the MVC frameworks & UI libraries provided by iOS and Android were far superior to writing mobile apps using web technologies. There were also some very public failures -- Facebook famously wrote their first iOS app in 2011 using HTML5, but ended up scrapping it due to terrible performance.

For years now, hybrid apps have been mocked and jeered by native app developers for being clunky and ugly, subpar performance, and having no advantages over native apps. While these may have been valid reasons in 2011, they are now virtually baseless thanks to a collection of new technologies that have emerged over the past two years. With these technologies, you can design, build and deploy robust mobile apps faster than you could with native technologies while incurring little to no app performance penalties, with thanks in large part to super fast mobile browser rendering speeds. This course is designed to teach you how to effectively use these new technologies to build insanely great mobile apps.

Without further ado, we'd like to welcome you to the future of mobile app development freed from the shackles of native languages & frameworks. Lets learn what the new mobile stack consists of and how it works.

## The new technologies powering modern hybrid apps
Before, building hybrid apps was a chore -- not because it was hard to build web pages, but because it was hard to build fully fledged web applications. With AngularJS that has now changed, and as a result, Angular became the core innovation that made hybrid apps possible. The bright folks at Drifty were some of the first to realize this and subsequently created the Ionic Framework to bridge the gap between AngularJS web apps and hybrid mobile apps. Since launching a little over a year ago, the Ionic Framework has [quickly grown in popularity amongst developers](http://www.google.com/trends/explore?hl=en-US&q=ionic+framework&cmpt=q&tz&tz&content=1) and their [main Github repo](https://github.com/driftyco/ionic) has over 13K stars as of this writing.

[where-ionic-fits] For a more in depth view of where Ionic fits into our hybrid app stack, [read this blog post](http://ionicframework.com/blog/where-does-the-ionic-framework-fit-in/) from one of Ionic's core developers and [read the "Overview" section](http://ionicframework.com/docs/overview/) on their about page.

[ Maybe mention that if were building mobile web ionic is enough, but if we want an app, we have to package ]

With our frontend technologies taken care of, we'll now need a way to package our app and run it on mobile devices. For this, Cordova is a fantastic solution. For those unfamiliar with Cordova, Adobe describes it via analogy: Cordova is to PhoneGap as Blink is to Chrome. Basically, PhoneGap is Cordova plus a whole bunch of other Adobe stuff.

[cordova-vs-phonegap] [Read this post for a more in depth understanding of the differences between Cordova and PhoneGap](http://ionicframework.com/blog/what-is-cordova-phonegap/)

The folks at Ionic have done a fantastic job of making Cordova super easy to use by directly wrapping it in their 'ionic' command line tool (don't worry, we'll cover this later). Just remember that Cordova is something that is running under the hood of your app that you will rarely need to worry about, but we will cover some common interactions with it in this course.

## What we're going to build
We will be building an app called Songhop -- a "Tinder for music" app that allows you to listen to 30 second song samples and favorite the ones you like. This is based on a real Ionic/Cordova powered app we built that exists on the iOS App Store -- feel free to download it to get a feeling for what you're about to build (and rate it 5 stars :). It's also worth noting that it only took us a month to build the Songhop app that's on the App Store, so that should give you an idea of how fast you can build & iterate using Ionic / Cordova.

We'll be covering a wide variety of topics in this course: scaffolding a new application, testing it in the emulator, installing native plugins for manipulating audio & more, swipe gestures for our interface, installing the app on your own device, deploying to the iOS & Android app stores, and so much more.

[ Talk about course structure here -- first X chapters are on ionic, remaining 3 chapters cover building & deploying to phones/app stores etc ]


## Prerequisites

[javascript-prereq] __Basic programming / JavaScript knowledge.__ If you don't know JavaScript, this guide is a good place to start.

[angular-prereq] __Familiarity with AngularJS.__ We will be using AngularJS for much of our app logic. If you aren't familiar with AngularJS, we highly recommend going through the course "A Better Way to Learn AngularJS".

In addition, you should be comfortable with basic web application concepts including REST and CRUD.

It's best to have either a Linux based OS or Mac to complete this tutorial. While it's certainly possible to develop on Windows, we won't be covering the specifics of running, debugging and troubleshooting Cordova on Windows. If you need to use Windows, we recommend reading this article which will help.

// Maybe look into phonegap build as an option here?

[install-node]  __Install Node.js__. Since you will need to install various packages for Node.js, we recommend that you follow these installation instructions which use npm.


## Recommendations for completing this course
Throughout this course, links to additional concepts and information will be included. You can use these links as supplementary material which can help you gain insight into the stack and its various components. As always, if you have any questions Google and Stackoverflow are your best bet. If you're unsure about something specific to this tutorial, feel free to drop me a line at eric@thinkster.io

We're firm believers in actually writing code while learning a new language or framework. Therefore, we strongly encourage you to type out all the code instead of copy+pasting it.


# Starting our project
Before we begin, we'll need to ensure that the [Ionic CLI](http://ionicframework.com/docs/cli/) is installed on our computer. We'll use it to develop and test our app in a web browser, and later for packaging our app into native binaries for mobile devices.

[install-ionic-cli] [Install the Ionic CLI](http://ionicframework.com/docs/cli/install.html) through npm by running `npm install -g ionic`

When you want to [start a new Ionic project](http://ionicframework.com/docs/cli/start.html), typically all you need to do is run `ionic start myApp blank' and it will scaffold a new application for you. However, for simplicity's sake, we've created a starter project specifically for this course that includes all the base HTML/CSS/JS files we'll be using.

[fork-app-from-gh] Clone [the ionic-songhop-app repo](https://github.com/EricSimons/ionic-songhop-app) and then run the command `git checkout -f checkpoint-0`. This will reset your workspace to the very beginning of the application. You can also [view the source code](https://github.com/EricSimons/ionic-songhop-app/tree/checkpoint-0) or [download a zip/tarball](https://github.com/EricSimons/ionic-songhop-app/archive/checkpoint-0.zip) on Github.

Now that we have the songhop project downloaded to our computer, lets get it running in our browser! To do this, we will use the Ionic CLI's command 'serve'. This command starts a local web server with live reload enabled, and then opens your browser directly to your application. As you develop your app, it will automatically refresh your web browser every time you save a file. _You can learn more about how the ionic serve command works & various configuration options available [here](http://ionicframework.com/docs/cli/test.html)._

[run-ionic-serve] In your terminal, head into the ionic-songhop-app folder and run `ionic serve`

If all went well, you should be seeing this in your browser window (be sure to resize your browser to be about the size of a phone):
![The boilerplate songhop template](images/0.png)

## Exploring our app's structure

[ionic-app-structure] Lets take a peek at how our Ionic application is structured - [read this post](/ionic-app-structure) explaining the base files that were scaffolded for us.





# Wiring it up to a server
Either use our server, or run your own locally
Create Recommendations service to ask for songs
Wire up to discover controller
Save songs (favorite) locally in memory using User service

# Creating and persisting user data
Create login/signup splash
Create User service for managing/creating user sessions
Create $localstorage plugin
Retrieve user data from server on boot
Save songs to server

# Cordova: Your bridge to native functionality
Everything you need to know about Cordova.
	- We recommend using native plugins whenever possible for performance/reliability
Switch from html5 audio tag to cordova media/file
	-Install media plugin
	-Install file plugin

# Deploying Songhop into production
Get the app running on your own device
Deploying to the iOS app store
Deploying to the Android app store

# Where to go next
Tinder-for-x